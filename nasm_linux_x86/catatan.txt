File.asm:
section .data -> tempat mendefinisikan variabel string.
section .text -> berisi kode intruksi yang akan di eksekusi oleh CPU.
_start -> entry point atau titik dimulainya eksekusi program.

Compiler dengan NASM:
-f elf32 -> Menentukan format objek output sebagai ELF 32bit.

Linking:
ld -> nama lingker untuk menggabungkan file objek menjadi binary executable.
-m elf_i386 -> Menggunakan model arsitektur x86.
-s -> Menghapus section stack dan bss dari output.

Jalankan program:
./hello -> Eksekusi program yang telah di kompilasi dan dilink.

---------Apa itu ELF?---------------

ELF -> Executable and Linkable Format

Adalah format file yang digunakan untuk representasi biner program pada sistem operasi Unix-like.

Memungkinkan file objek, objek berlink, eksekusi, shared objek, dan core dump untuk dibaca oleh sistem operasi.

Ini memungkinkan pernyimpanan data statis, simbolik dan dinamis dari program.

Format ini juga mendukung fitur seperti section stack dan bss.


----------Kenapa ELF?---------------

Memberikan fleksibilitas dalam struktur file, Contohnya section .bss digunakan untuk memperoleh variabel yang belum di definisikan.

Ini juga membantu dalam debugging karena informasi tentang simbol alamat dan sebagainya tersimpan dengan baik.


-----------Apa itu i386?-----------------

i386 adalah nama untuk arsitektur komputer x86 32-bit yang di kembangkan oleh intel.

i386 sebenarnya merujuk pada versi 386 dari arsitektur, namun istilah ini telah menjadi umum digunakan untuk merujuk pada seluruh keluarga x86 32-bit.

Arsitektur i386 merupakan generasi awal dari komputer x86 32-bit.
Termasuk prosesor seperti Intel 80386, yang rilis pada tahun 1985.


----------Kenapa tulisan nya i386 bukan 32?-------------

Istilah i386 berasal dari nama produk intel dan bukan pengembangan standar. Meskipun x86 adalah istilah yang digunakan untuk menggambarkan arsitektur 32-bit, penggunaan i386 telah menjadi sebagian dari terminologi.

Namun, istilah x86-32 juga sering digunakan untuk merujuk pada sama halnya dengan i386.


-------------Apa itu section stack (.bss )--------------

Stack ( .bss ) ini adalah sektor yg digunakan untuk menyimpan variabel global dan lokal yang belum di definisikan nilai awal nya, variabel ini diinisialisasi dengan 0 ketika program dimulai.


-------------Apa itu section data (.data)---------------
Data .data ini adalah sektor yg digunakan untuk menyimpan variabel global dan lokal yang memiliki nilai awal.

----------------Mengapa menghapus section stack dan .bss?---------------

Penggunaan opsi -s pada ld akan menghapus sektor stack dari output. ini berarti variabel yang di definisikan dalam .bss tidak akan diinisialisasi dengan nol, dan sektor stack sendiri tidak ada.

Secara khusus opsi -s menghapus sektor .bss, ini berarti bahwa variabel global yang di definisikan dalam .bss tidak akan di inisialisasi.

Mengapa ini penting? karena di file hello.asm kita tidak menggunakan sektor .bss sama sekali, jadi kita hapus saja sektor .bss dengan opsi -s pada ld (linker), ini dapat mengurangi ukuran file eksekusi, tetapi juga bisa menyebabkan beberapa kekurangan jika bukan di gunakan dengan hati-hati. Ini adalah opsi lanjutan yang lebih dikenal oleh pengembang prefesional.

-------------------------------------------------------------------
